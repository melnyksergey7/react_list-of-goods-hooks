{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortedType","goodsFromServer","App","useState","defaultValue","sortField","setSortField","reverse","setReverse","visibleGoods","goods","readyGoods","sort","good1","good2","sortByAlphabet","localeCompare","sortByLength","length","getReadyGoods","className","onClick","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,0BAAAA,E,sBAAAA,E,iBAAAA,M,KAqCE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAAWI,cAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EA9BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,QAETI,EAAU,YAAOD,GAmBrB,OAjBIL,GACFM,EAAWC,MAAK,SAACC,EAAOC,GACtB,OAAQT,GACN,KAAKL,EAAWe,eACd,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAAWiB,aACd,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,IACFI,EAAaA,EAAWJ,WAGnBI,EAOcQ,CAAclB,EAAiB,CAAEI,YAAWE,YAEjE,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaN,EAAWe,iBACvCO,KAAK,SACLF,UAAWG,IACT,SACA,UACA,CAAE,WAAYlB,IAAcL,EAAWe,iBAN3C,iCAYA,wBACEM,QAAS,kBAAMf,EAAaN,EAAWiB,eACvCK,KAAK,SACLF,UAAWG,IACT,SACA,YACA,CAAE,WAAYlB,IAAcL,EAAWiB,eAN3C,4BAYA,wBACEI,QAAS,kBAAMb,GAAYD,IAC3Be,KAAK,SACLF,UAAWG,IACT,SACA,aACA,CAAE,YAAahB,IANnB,sBAYEF,EAAUa,OAAS,GAAKX,IACxB,wBACEe,KAAK,SACLF,UAAWG,IACT,SACA,YACA,YAEFF,QAAS,WACPf,EAAaN,EAAWI,cACxBI,GAAW,IATf,sBAiBJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCvHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b4145b32.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortedType {\n  sortByAlphabet = 'alphabet',\n  sortByLength = 'length',\n  defaultValue = '',\n}\n\ninterface SortedParams {\n  sortField: SortedType,\n  reverse: boolean,\n}\n\nfunction getReadyGoods(\n  goods: string[],\n  { sortField, reverse }: SortedParams,\n) {\n  let readyGoods = [...goods];\n\n  if (sortField) {\n    readyGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortedType.sortByAlphabet:\n          return good1.localeCompare(good2);\n        case SortedType.sortByLength:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    readyGoods = readyGoods.reverse();\n  }\n\n  return readyGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortedType.defaultValue);\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = getReadyGoods(goodsFromServer, { sortField, reverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortedType.sortByAlphabet)}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortedType.sortByAlphabet },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortedType.sortByLength)}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-sucess',\n            { 'is-light': sortField !== SortedType.sortByLength },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverse(!reverse)}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !reverse },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortField.length > 0 || reverse) && (\n          <button\n            type=\"button\"\n            className={classNames(\n              'button',\n              'is-danger',\n              'is-light',\n            )}\n            onClick={() => {\n              setSortField(SortedType.defaultValue);\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}